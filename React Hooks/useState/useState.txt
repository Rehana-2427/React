### 🔹 `useState`
- Initial State & Lazy Initialization
- Updating State
- Async nature of `setState`
- State Uplifting


✅ STEP 1: What is useState?
useState is a React Hook that allows you to store data (called state) in a functional component.

✅ Example:

const [count, setCount] = useState(0);
count → current value of the state (initially 0).

setCount → function used to update the value.

useState(0) → sets the initial value of the state to 0.

🧠 Think of it as a special variable that, when changed, updates the UI automatically.

✅ STEP 2: Why do we need useState?
In normal JavaScript, when a variable changes, it doesn't affect the UI.

❌ Example (plain JavaScript):

let count = 0;
count += 1; // this does NOT update the screen in a React app

But with useState, if you update the state, React automatically re-renders the component with the new data.

✅ That’s why we use useState — it connects the data to the UI.

- Updating State

✅ STEP 3: How does useState work?
🔁 React Lifecycle:
React renders the component.

useState creates internal memory to store the state.

When you call setState(), React:

Updates the internal value.

Re-renders the component with new values.


✅ STEP 4: How useState works with primitive values
✅ Example:
const [count, setCount] = useState(0);

const increment = () => {
  setCount(count + 1);
  console.log(count); // old value, because updates are async
};

🔍 Explanation:
count is a primitive value (number).

setCount(count + 1) creates a new number.

React sees the value changed → triggers re-render.

🧠 Important: setState is asynchronous. So console.log(count) still prints the old value right after calling setCount.

✅ STEP 5: How useState works with non-primitive values (objects, arrays)
❌ Wrong way:
const [user, setUser] = useState({ name: "Rehana", age: 23 });

const updateAge = () => {
  user.age += 1;
  setUser(user); // 🚫 Doesn't work!
};

✅ Why it fails:
user is an object. When we call setUser(user), it's the same memory reference.

React does a shallow comparison (compares memory addresses).

Since the reference didn’t change, React doesn’t re-render.

✅ STEP 6: Correct way to update non-primitive data
✅ Right way:

const updateAge = () => {
  setUser({ ...user, age: user.age + 1 });
};

🧠 Explanation:
{ ...user } creates a new object in memory (new reference).

Now React sees that the reference changed → it re-renders the component.

Primitive (number, string, boolean)	setState(newValue)	Simple comparison works

Object / Array (non-primitive)	setState({...oldState}) or setState([...oldArray])	New reference needed to trigger re-render 




- Async nature of `setState`

✅ TOPIC: Asynchronous Nature of setState in React (useState)
📌 1. What does "asynchronous setState" mean?
React does not update the state immediately after calling setState (or useState).
Instead, it schedules the state update and waits until the entire function finishes executing before it re-renders the component.

This is why you don’t see the new value of state immediately after calling setCount.

📌 2. Understanding with a basic example


const [count, setCount] = useState(10);

const increment = () => {
  setCount(count + 1);         // Uses current value of count (10 + 1 = 11)
  setCount(count + 4);         // Uses same count value again (10 + 4 = 14)
  setCount(count + 3);         // (10 + 3 = 13)
  setCount(count + 2);         // (10 + 2 = 12)
  console.log(count);          // Still prints 10 (old value)
};
📌 3. What happens internally?
React collects all setCount(...) calls during the function execution and queues them:

🧠 Even though you're calling setCount multiple times, React doesn't immediately update the value.
// It creates a queue like:
queue = [11, 14, 13, 12]
Then React processes them in order, but since they all use the same old value (count = 10), each result is based on 10 — not on the updated result from the previous call.

❗ This is why the final value becomes 12 (from last call: 10 + 2)
📌 4. React does NOT perform "cascading updates"
In other programming environments, if you call something like:

setCount(count + 1)
setCount(count + 2)
You might expect:

count becomes 11

then count becomes 13

But React doesn’t work that way with useState(count + x), because all updates are using the same snapshot of state — the one that existed when the function started (count = 10).

📌 5. ✅ SOLUTION — use the callback version of setState
To fix this, use the callback syntax, which gives you the latest value:
setCount((prev) => prev + 1);
setCount((prev) => prev + 4);
Now, each update uses the most recent value from the last update.

📌 6. Your working example:

const increment = () => {
  setCount(count + 1);                  // still uses old value (10)
  setCount((prev) => prev + 3);         // uses latest updated value
};

🔍 How it works step by step:
✅ First Click:
count starts at 10

setCount(count + 1) → 11 (adds 1 to 10)

setCount((prev) => prev + 3) → prev is now 11, so final value = 14

✅ Second Click:
count is now 14

setCount(count + 1) → 15

setCount((prev) => prev + 3) → prev is 15, final value = 18

📌 7. Why is it called "asynchronous"?
Because React doesn't immediately update state. Instead, it:

Collects state updates in a queue

Waits for the function to finish

Then applies all the state updates

Then re-renders the component

This delayed batching of updates is why setState is considered asynchronous.

Note : 
Use the callback version (prev => ...) when updating state multiple times in the same function.



- Initial State & Lazy Initialization
🧠 What is the problem?
When you pass a function like compute() with parentheses to useState(), it runs the function immediately — even before the component renders — on every render. This is wasteful and affects performance, especially if the function is heavy (like a large loop or API call).

✅ What is Lazy Initialization?
React provides a way to call a function only once during the initial render — by passing the function itself without calling it, i.e., useState(compute) instead of useState(compute()).

🛠️ Code Before Optimization (Eager Execution)
const [count, setCount] = useState(compute()) // ❌ This calls compute() on every render
When compute() is used with (), it executes immediately during every render.

console.log("inside compute") runs every time, even if not needed.

✅ Code After Optimization (Lazy Initialization)
const [count, setCount] = useState(compute) // ✅ Lazy Initialization

useState now calls the compute function only during the first render.

From second render onward, React just uses the already stored state value.

This saves time and resources – great for performance.

📊 Step-by-step Execution Flow
➤ 1. First Render

const [count, setCount] = useState(compute)
React sees a function reference (compute) and calls it internally once.

compute returns the sum of 0 to 100 = 5050.

So initial value of count is set to 5050.

➤ 2. User Clicks "Increment" Button

const increment = () => {
    setCount((prev, () => {
        return prev + 1
    }))
}

➤ 3. React Updates State
The callback (prev) => prev + 1 is executed with the latest count value.

Count increases correctly: 5050 → 5051 → 5052, and so on.

No need to re-run compute again.

🚀 Key Benefits of Lazy Initialization
✅ One-time computation	compute() runs only once during first render
🚫 Avoids repeated execution	Prevents unnecessary recomputations in future renders
⚡ Better performance	Especially useful for heavy initial state calculations



-state Uplifting

🧠 What is State Uplifting?
State uplifting means moving state up to the nearest common parent so that multiple child components can access or update the same state.

✅ Why do we need State Uplifting?
Sometimes, two or more child components need to share data or sync with each other.

👉 In such cases, we don’t store state in one child. Instead, we:

Move the state to the parent.

Pass the state and state updater function down as props.

🍕 Pizza Order App – Example Breakdown
🧩 Components:
Parent (PizzaApp) – holds the shared state: selected toppings.

Child1 (Topping Selector) – allows users to select toppings.

Child2 (Order Summary) – displays selected toppings live.

🧩 Parent Component
const [selectedToppings, setSelectedToppings] = useState([]);
✅ State is lifted to the parent.

This state is shared between Child1 and Child2.

<Child1 selectedToppings={selectedToppings} setSelectedToppings={setSelectedToppings} />
<Child2 selectedToppings={selectedToppings} />
➡️ Props sent to children:

Child1: to update toppings.

Child2: to display toppings.

🧩 Child1 (Topping Selector)
Let’s say this component has checkboxes like:
<input type="checkbox" value="Cheese" onChange={handleChange} />
And when the user selects a topping:
const handleChange = (e) => {
  const value = e.target.value;
  if (selectedToppings.includes(value)) {
    setSelectedToppings(selectedToppings.filter(t => t !== value));
  } else {
    setSelectedToppings([...selectedToppings, value]);
  }
};
✅ Child1 uses setSelectedToppings to update the parent's state.

🧩 Child2 (Order Summary)
{selectedToppings.map((topping, index) => (
  <li key={index}>{topping}</li>
))}

✅ Child2 receives and displays state from parent.

It automatically re-renders when the state is updated by Child1.

📈 Flow Diagram

User clicks checkbox in Child1
   ⬇
Child1 calls setSelectedToppings
   ⬇
Parent updates selectedToppings state
   ⬇
Child2 re-renders and shows updated toppings


✅ Benefits of State Uplifting
🔄 Shared state	Both children stay in sync
🧼 Clean logic	State is centralized
💡 Reusable	Components become more modular

State uplifting helps manage shared state between child components.

The state lives in the common parent.

Children receive data and update data via props.

Great for synchronizing behavior and maintaining a single source of truth.
