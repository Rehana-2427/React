- Differences between HTML and JSX
- JSX Syntax & Expressions
- JSX Events & User Interaction
- JSX Conditional Rendering
- JSX Lists & Keys
- JSX Forms & Controlled Components
- JSX Styling (Inline & CSS)
- JSX Children and Props
- JSX Best Practices




- What is JSX?

JSX stands for JavaScript XML.(JavaScript + XML )

It is a syntax extension for JavaScript that allows writing HTML-like code within JavaScript.

It is used to define the structure of UI components in React.

Makes it easier to visualize and create UI layouts by blending HTML structure and JavaScript logic.

JSX syntax closely resembles HTML but is embedded within JavaScript code.



- Differences between HTML and JSX ?

Example:
    In HTML :   <ul>
                    <li> Home </li>
                    <li> Services </li>
                    <li>Contact</li>
                    <li> About </li>
                    </ul>

                    
                In JSX :    const element = (<ul>
                                    <li>Services</li>
                                    <li>Contact</li>
                                    <li>Home</li>
                                     <li>About</li>
                                    </ul>)




- JSX Syntax & Expressions ?

      JSX Syntax Basics:   In JSX, elements are written similarly to HTML . JSX syntax closely mirrors HTML with some essential differences and rules
      Case 1 : Basic syntax 
               const element = <h1> Hi Hello Basic syntax of JSX <.h1>
      Case 2 : Parent elements 
               const element = (<div>
                                    <h1>parent JSX</h1>
                                    <ul>
                                          <li>Home</li>
                                          <li>About</li>
                                    </ul>
                                 </div> )
      Case 3 : Self - closing tags 
               const element = <img src="/image" alt="jsx-image" />
   JSX Expression :
         JSX allows you to embed any JavaScript expression by using curly braces {}.
         Example : const name = "Rehana";
                   const greeting = <h1>Hi {name} </h1>

         Example : const firstName = "Rehana"
                  const LastName = "Shaik"
                  function formater(user){
                                 retrun user.firstName+' '+user.LastName;
                  }
                   const fullname = <h1>Hello {formater(user)}</h1>




- JSX Events & User Interaction

   JSX events allow you to handle user interactions, such as clicks, form submissions, and keyboard events. 
   You can attach event handlers directly to JSX elements using camelCase syntax. 
   For example, to handle a button click, you can define a function and pass it to the `onClick` prop.

   function handleClick (){
      alert ("Button clicked");
   }
   const button =<button onClick = {handleClick}>Click Me</button>
   



- JSX Conditional Rendering

      - JSX allows you to render elements based on certain conditions.
         To conditionally render elements, you can use the ternary operator or logical && operator. 
         Example : 
                  Case 1 : using if conditional
                           function Greeting(isLoggedIn){
                              if(isLoggedIn){
                                 return <h1>Welocme </h1>
                              }
                              else {
                                 return <h1>You are not eligibile</h1>
                              }
                           }
                  Case 2 : using ternary operator 
                           function AgeCheck(){
                              const age = 18 ;
                              return <h1>{age>=18 ? "eligibile" : "not eligibile" }</h1>
                           }
                  Case 3 : using logical operator
                           function WelcomeMessage() {
                              const isLoggedIn = true;

                              return (
                                       <div>
                                          <h1>Home Page</h1>
                                          {isLoggedIn && <p>Welcome back, user!</p>}
                                       </div>
                                    );
                           }




                         
- JSX Lists & Keys

   JSX allows you to create lists of elements dynamically by utilizing JavaScript's array methods.
   JSX allows you to create dynamic lists by mapping over an array of data and returning a corresponding set of elements.
   To render a list of elements in JSX, you can use the `map()` function to iterate over an array and return a new array of elements. 
   Each element should have a unique `key` prop to help React identify which items have changed, are added, or are removed. 
   Example:

            const items = ['Item 1', 'Item 2', 'Item 3'];
            {items.map((item, index) => <li key={index}>{item}</li>)}


            const numbers = [1, 2, 3, 4, 5];
            {numbers.map((number, index) => <li key={index}>{number}</li>)}


            const elements = ["one" , "two" , "three"];
            const elementList = (
               <div>
                  <h1>Element List</h1>
                  <ul>
                     {elements.map((element,index)=>(
                        <li key={index}>{index} - {element}</li>
                     ))}
                  </ul>
               </div>
            )


- JSX Forms & Controlled Components

    Controlled components in React are those that do not maintain their own state. Instead, they rely on React state to manage their values. 
    This means that form elements like `<input>`, `<textarea>`, and `<select>` will have their values controlled by React state. 
    Example :
            import React,{useState} from 'react';

            function ControlledForm() {
               const [value, setValue] = React.useState('');
               return (
                  <input type="text" value={value} onChange={(e) => setValue(e.target.value)} />
                  <button onClick={() => setValue('')}>Reset</button>
                  <button onClick={() => alert(value)}>Submit</button>
               )
            }



          function UncontrolledForm() {
               return (
                  <input type="text" defaultValue="Type here..." />
                  <button onClick={() => alert('Form submitted!')}>Submit</button>
               )
          }





- JSX Styling (Inline & CSS)

   Inline styles in JSX can be applied by passing a JavaScript object to the `style` attribute. 
   The keys of the object are camelCased versions of the CSS property names, and the values are the corresponding values for those properties.
    Example:
      const style = { color: 'blue', fontSize: '20px' };
      const elementStyle = { backgroundColor: 'lightgray', padding: '10px' };
      const App = () => {
         return <div style={elementStyle}>Hello, World!</div>;
         <div style={style}>This text is styled inline!</div>;
         <h1 style={color:'red',fontSize:'20px'}>Hello inline styling</h1>
      }
      





- JSX Children and Props

   JSX allows you to pass data to components via props, making it easy to customize and reuse components.
   Props can be used to pass data and event handlers from parent components to child components, allowing for dynamic and interactive user interfaces.
   In React, props are used to pass data from parent components to child components, enabling the creation of reusable and dynamic components.
   Additionally, props can be used to pass functions as event handlers, allowing child components to communicate back to their parents.
   Props are read-only and should not be modified by the component receiving them. 
   Example:
            function Greeting(props) {
               return <h1>{props.message}</h1>;
               }


            function App() {
               return <Greeting message="Hello, World!" />;
               }
                  



- JSX Fragment Example: Using React Fragments to group multiple elements without adding extra nodes to the DOM.

                           function FragmentExample() {
                              return (
                                 <React.Fragment>
                                    <h1>This is a fragment example</h1><p>Fragments help in grouping elements without introducing extra nodes.</p>
                                    <p>Using fragments can help improve performance and readability of your components.</p>
                                 </React.Fragment>
                              )}






✅ JSX Best Practices
Keep components small and focused on a single responsibility for better maintainability and readability.

Use meaningful names for components and props to enhance clarity and understanding.

Use PropTypes to validate props and ensure that components receive the correct data types.

Use defaultProps to set default values for props, providing fallback values when none are supplied.

Use React hooks like useState and useEffect to manage state and handle side effects in functional components.

Use useMemo and useCallback to optimize performance by memoizing values and functions, preventing unnecessary re-renders.

Use useEffect for side effects such as data fetching, subscriptions, or DOM manipulation.

Use useRef to directly access DOM elements when necessary, allowing fine-grained control over component behavior.

Use useReducer to manage complex state logic, especially when the state depends on previous values or has multiple sub-values.

Use useLayoutEffect to run effects synchronously after DOM mutations — helpful for layout calculations before paint.

Use useContext to manage global state and share data between components without prop drilling.

Use useImperativeHandle with forwardRef to customize the values exposed to parent components via refs.

Use React.forwardRef to allow parent components to access child DOM elements or methods via refs.

Use key props in list-rendered components to help React identify which items changed, were added, or removed — improving rendering performance.

Use React.memo to memoize functional components and avoid unnecessary re-renders when props haven’t changed.

Use React.lazy and Suspense for code-splitting and lazy loading, reducing initial load time.

Combine PropTypes and defaultProps to both validate and set default values for props — improving reliability and documentation.