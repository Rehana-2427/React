## ⚙️ **2. Tooling: The React Ecosystem**
- npm vs npx
- What is Babel? JSX to JS transformation
- What is Webpack? Bundler & Loaders
- Creating React Apps with `create-react-app`
- Directory structure of a React project


🔰 Before diving into the React ecosystem, make sure to check the Introduction folder.
In that section, I’ve explained how to write React code using basic JavaScript without using the create-react-app (CRA) command.

Yes, we can write React code using plain JavaScript by including the React and ReactDOM CDN links directly in an HTML file.
However, this approach is not ideal for real-time or large-scale projects because it requires extra manual setup and has several limitations.

To make things easier, JSX was introduced.

💡 What is JSX?
JSX is a syntax extension that lets you write HTML-like code inside JavaScript. It stands for JavaScript + XML.
But browsers don’t understand JSX directly — so we need a compiler.

That’s where Babel comes in. Babel compiles JSX code into plain JavaScript so browsers can understand and run it.

🚀 Why use create-react-app?
While we can set up everything manually using CDN links and Babel, it's not practical for real-world applications.
So, Create React App (CRA) was introduced — it's a tool that sets up a modern React environment with zero configuration.

CRA bundles all necessary packages like React, Babel, Webpack, ESLint, etc., into one setup.

To use CRA, we rely on the following commands:

npm: Node Package Manager — installs packages from the registry.

npx: Executes a package without installing it globally.

npx create-react-app my-app  ---> This command creates a fully functional React project with a ready-to-use structure.

