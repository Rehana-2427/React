- Component Types: Functional vs Class Components
- Props & PropTypes
- Component Composition and Reusability



📦 What is a Component in React?

COMPONENT = STATE + UI (HTML + JS) + PROPS(STATE AND PROPS - OPTIONAL)

components are like JavaScript functions. They accept arbitrary inputs (called “props”) 
and return React elements describing what should appear on the screen.
A component is a reusable piece of code in React that returns some UI (User Interface).

It can be small (like a button) or big (like a whole page).

Think of it like building blocks — you build your app by combining many small blocks (components).

Example:
Navbar, Footer, LoginForm, HomePage — all can be components!

Navbar.jsx - 	Contains only the Navbar UI and logic (example: logo, menu links)
Footer.jsx -	Contains only the Footer UI and logic (example: copyright, links)
Content.jsx -	Contains only the Main content (example: welcome text, images)
Home.js	- Combines all three components together to build the full Home page

📁 Folder Structure Example

src/
 ├── components/
 │     ├── Navbar.jsx
 │     ├── Footer.jsx
 │     └── Content.jsx
 └── pages/
       └── Home.js

⚡ How it works?

1. Navbar.jsx
import React from 'react';

function Navbar() {
  return (
    <nav>
      <h1>My Website</h1>
      <ul>
        <li>Home</li>
        <li>About</li>
        <li>Contact</li>
      </ul>
    </nav>
  );
}

export default Navbar;

2. Content.jsx

import React from 'react';

function Content() {
  return (
    <main>
      <h2>Welcome to the Home Page!</h2>
      <p>This is the main content area.</p>
    </main>
  );
}

export default Content;

3. Footer.jsx

import React from 'react';

function Footer() {
  return (
    <footer>
      <p>© 2025 My Website. All rights reserved.</p>
    </footer>
  );
}

export default Footer;

4. Home.js

import React from 'react';
import Navbar from '../components/Navbar';
import Content from '../components/Content';
import Footer from '../components/Footer';

function Home() {
  return (
    <>
      <Navbar />
      <Content />
      <Footer />
    </>
  );
}

export default Home;


You split big page (Home) into small reusable components (Navbar, Content, Footer).

Each component is separate for better organization and maintenance.

Home.js just calls/imports these smaller pieces and renders them together.

This is called Component-Based Architecture 


✅ Benefits:

✅ Reusability — Write once, use anywhere.
✅ Separation of Concerns — Each component does one thing (example: Navbar only handles navigation).
✅ Maintainability — Easy to find and fix bugs because everything is organized.
✅ Scalability — You can easily add more features by adding more components without breaking the existing app.


🛠️ Types of Components in React

There are mainly 2 types:

1.Functional components
2.Class components


most useful components are Functional components.
first check components folder in that i explain with simple basic example


| Feature           | Functional Component                  | Class Component                                 |
| ----------------- | ------------------------------------- | ----------------------------------------------- |
| Syntax            | Function-based                        | Class-based (extends `Component`)               |
| State             | useState() hook                       | this.state and this.setState()                  |
| Lifecycle Methods | useEffect()                           | componentDidMount(), componentDidUpdate(), etc. |
| Simpler to Write  | ✅ Yes                                | ❌ More boilerplate                            |
| `this` keyword    | ❌ Not used                           | ✅ Must use `this` (e.g., `this.props`)        |
| Performance       | Slightly better (in modern React)     | Slightly heavier                                |
| Modern Usage      | ✅ Preferred in React 16.8+ with Hooks| Used in older codebases                         |






✅ 1. Props & PropTypes
🔹 What are Props in React?
Props (short for "properties") are a way to pass data from one component to another, usually from a parent component to a child component.

💡 Example:

function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;
}

// Usage:
<Greeting name="Rehana" />

Here, "Rehana" is passed as a prop named name to the Greeting component. Inside the component, we access it using props.name.

🎯 Why use Props?
To make components reusable.

To customize behavior or content of a component.

To separate data from logic, keeping components flexible.

🔸 PropTypes in React
PropTypes are used to validate the data type of props passed to a component. It helps in catching bugs early by making sure props have the right types.

To use PropTypes, you need to import it from the prop-types package:
 --------------------------------------npm install prop-types--------------------------------------------

 🧠 Example with PropTypes:

 import PropTypes from 'prop-types';

function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;
}

Greeting.propTypes = {
  name: PropTypes.string.isRequired,
};


Here:

We declare that name must be a string.

.isRequired means this prop must be passed, or React will show a warning.

✅ Benefits of PropTypes:
Adds type safety without TypeScript.

Warns during development if incorrect prop types are passed.

Helps document what kind of data your component expects.

✅ 2. Component Composition and Reusability
🔹 What is Component Composition?
Component Composition is the idea of building complex UIs by combining smaller, reusable components.

Instead of writing everything in one giant component, break your UI into small, manageable, reusable pieces.

🧩 Example:
function Header() {
  return <h2>Welcome to My Site</h2>;
}

function Footer() {
  return <footer>© 2025 MyCompany</footer>;
}

function Layout(props) {
  return (
    <div>
      <Header />
      <main>{props.children}</main>
      <Footer />
    </div>
  );
}

// Using Layout:
<Layout>
  <p>This is the homepage content.</p>
</Layout>


function Header() {
  return <h2>Welcome to My Site</h2>;
}

function Footer() {
  return <footer>© 2025 MyCompany</footer>;
}

function Layout(props) {
  return (
    <div>
      <Header />
      <main>{props.children}</main>
      <Footer />
    </div>
  );
}

// Using Layout:
<Layout>
  <p>This is the homepage content.</p>
</Layout>


🔄 Why is this useful?
Promotes separation of concerns.

Makes components easier to maintain and test.

Improves readability and scalability of code.


🔸 Component Reusability
Reusability means writing a component once and using it many times, possibly with different data (props).

🧠 Example:

function Button({ label, onClick }) {
  return <button onClick={onClick}>{label}</button>;
}

// Reusing with different data
<Button label="Save" onClick={saveData} />
<Button label="Delete" onClick={deleteData} />

